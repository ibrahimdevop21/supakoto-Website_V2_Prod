---
export interface Props {
  selectedBranch: {
    id: string;
    name: string;
  };
  currentLang: 'en' | 'ar';
}

const { selectedBranch, currentLang } = Astro.props;
---

<form id="contact-form" method="POST" action="/api/contact" data-vercel="true" class="space-y-6">
  <!-- Honeypot field (hidden) -->
  <input type="text" name="_hp" class="hidden" tabindex="-1" autocomplete="off">
  
  <!-- Load time tracking -->
  <input type="hidden" name="_lt" id="load-time">
  
  <!-- Branch context -->
  <input type="hidden" name="branch_id" value={selectedBranch.id}>

  <!-- Name and Phone Row -->
  <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <!-- Name Field -->
    <div class="space-y-2">
      <label class="sk-label">
        {currentLang === 'ar' ? 'الاسم الكامل' : 'Full Name'} <span class="text-red-400">*</span>
      </label>
      <input 
        type="text" 
        name="name" 
        required 
        class="sk-input max-w-full"
        placeholder={currentLang === 'ar' ? 'أدخل اسمك الكامل' : 'Enter your full name'}
      >
    </div>

    <!-- Phone Field with responsive layout -->
    <div class="space-y-2">
      <label class="sk-label">
        {currentLang === 'ar' ? 'رقم الهاتف' : 'Phone Number'} <span class="text-red-400">*</span>
      </label>

      <!-- Radios above input on mobile, inline row on ≥sm -->
      <div class="flex flex-col sm:flex-row sm:items-center gap-2">
        <!-- Country radio group -->
        <fieldset class="flex flex-row sm:flex-row items-center gap-2">
          <!-- AE (default) -->
          <label>
            <input type="radio" name="country" value="AE" checked class="peer hidden" />
            <div
              class="h-10 sm:h-[44px] px-3 rounded-xl border border-slate-700/80 bg-slate-900/60
                     text-sm text-slate-200 flex items-center gap-2 cursor-pointer select-none
                     hover:border-[#bf1e2e]/60 transition
                     peer-checked:bg-[#bf1e2e] peer-checked:text-white peer-checked:border-[#bf1e2e]"
            >
              🇦🇪 <span>AE</span>
            </div>
          </label>

          <!-- EG -->
          <label>
            <input type="radio" name="country" value="EG" class="peer hidden" />
            <div
              class="h-10 sm:h-[44px] px-3 rounded-xl border border-slate-700/80 bg-slate-900/60
                     text-sm text-slate-200 flex items-center gap-2 cursor-pointer select-none
                     hover:border-[#bf1e2e]/60 transition
                     peer-checked:bg-[#bf1e2e] peer-checked:text-white peer-checked:border-[#bf1e2e]"
            >
              🇪🇬 <span>EG</span>
            </div>
          </label>
        </fieldset>

        <!-- Phone input (moves below radios on mobile, inline on ≥sm) -->
        <input
          type="tel"
          name="phone"
          id="phone-input"
          dir="ltr"
          required
          class="sk-input w-full sm:flex-1 min-w-0"
          placeholder="1234567890"
        />
      </div>

      <div id="phone-error" class="sk-error hidden"></div>
      <div id="phone-preview" class="sk-help"></div>
    </div>
  </div>

  <!-- Services Field - Checkboxes -->
  <div class="space-y-3">
    <label class="sk-label">
      {currentLang === 'ar' ? 'الخدمات المطلوبة' : 'Services Needed'} <span class="text-red-400">*</span>
    </label>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
      {[
        { v: 'ppf', tEn: 'Paint Protection Film (PPF)', tAr: 'فيلم حماية الطلاء' },
        { v: 'ceramic', tEn: 'Ceramic Coating', tAr: 'نانو سيراميك' },
        { v: 'heat_uv_isolation', tEn: 'Heat/UV Isolation', tAr: 'عزل الحرارة والأشعة فوق البنفسجية' },
        { v: 'window_tinting', tEn: 'Window Tinting', tAr: 'تظليل النوافذ' },
        { v: 'building_heat_uv_isolation', tEn: 'Building Heat/UV Isolation', tAr: 'عزل الحرارة/الأشعة للمباني' },
      ].map(opt => (
        <label class="w-full flex items-center gap-3 p-3 rounded-lg bg-slate-800/30 border border-slate-700/50
                       hover:border-[#bf1e2e]/60 transition cursor-pointer">
          <input type="checkbox" name="services" value={opt.v}
                 class="h-4 w-4 rounded-sm accent-[#bf1e2e] focus:outline-none" />
          <span class="text-sm text-slate-200">{currentLang === 'ar' ? opt.tAr : opt.tEn}</span>
        </label>
      ))}
    </div>

    <div id="services-error" class="sk-error hidden"></div>
  </div>

  <!-- Optional Car Details -->
  <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <div class="space-y-2">
      <label class="sk-label">
        {currentLang === 'ar' ? 'ماركة السيارة (اختياري)' : 'Car Make (Optional)'}
      </label>
      <input 
        type="text" 
        name="car_make" 
        id="car-make"
        class="sk-input max-w-full"
        placeholder={currentLang === 'ar' ? 'مثل: تويوتا، بي إم دبليو، مرسيدس' : 'e.g. Toyota, BMW, Mercedes'}
      >
      <div id="car-make-error" class="sk-error hidden"></div>
    </div>

    <div class="space-y-2">
      <label class="sk-label">
        {currentLang === 'ar' ? 'سنة الصنع (اختياري)' : 'Car Year (Optional)'}
      </label>
      <input 
        type="number" 
        name="car_year" 
        id="car-year"
        min="1900" 
        max="2025"
        class="sk-input max-w-full"
        placeholder={currentLang === 'ar' ? 'مثل: 2020' : 'e.g. 2020'}
      >
      <div id="car-year-error" class="sk-error hidden"></div>
    </div>
  </div>

  <!-- Message Field -->
  <div class="space-y-2">
    <label class="sk-label">
      {currentLang === 'ar' ? 'رسالتك' : 'Your Message'}
    </label>
    <textarea 
      name="message" 
      rows="4"
      class="sk-input max-w-full resize-none"
      placeholder={currentLang === 'ar' ? 'أخبرنا عن احتياجاتك وسنتواصل معك قريباً' : 'Tell us about your needs and we\'ll get back to you soon'}
    ></textarea>
  </div>

  <!-- Submit Button -->
  <button 
    type="submit" 
    id="submit-btn"
    class="sk-btn w-full py-4"
  >
    <span id="submit-text">
      {currentLang === 'ar' ? 'إرسال الرسالة' : 'Send Message'}
    </span>
    <span id="submit-loading" class="hidden">
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      {currentLang === 'ar' ? 'جاري الإرسال...' : 'Sending...'}
    </span>
  </button>

  <!-- Success Message -->
  <div id="success-message" class="hidden p-4 bg-green-900/30 border border-green-700/50 rounded-lg">
    <div class="flex items-center">
      <svg class="w-5 h-5 text-green-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
      </svg>
      <span class="text-green-300 font-medium">
        {currentLang === 'ar' ? 'تم إرسال رسالتك بنجاح!' : 'Message sent successfully!'}
      </span>
    </div>
    <p class="text-green-200 text-sm mt-2">
      {currentLang === 'ar' ? 'سنتواصل معك قريباً عبر الهاتف أو الواتساب.' : 'We\'ll contact you soon via phone or WhatsApp.'}
    </p>
  </div>

  <!-- Error Message -->
  <div id="error-message" class="hidden p-4 bg-red-900/30 border border-red-700/50 rounded-lg">
    <div class="flex items-center">
      <svg class="w-5 h-5 text-red-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
      </svg>
      <span class="text-red-300 font-medium">
        {currentLang === 'ar' ? 'حدث خطأ في الإرسال' : 'Error sending message'}
      </span>
    </div>
    <p class="text-red-200 text-sm mt-2" id="error-text">
      {currentLang === 'ar' ? 'يرجى المحاولة مرة أخرى أو الاتصال بنا مباشرة.' : 'Please try again or contact us directly.'}
    </p>
  </div>
</form>

<!-- Design Tokens -->
<style>
  .sk-input {
    @apply w-full rounded-xl bg-slate-900/60 border border-slate-700/80 px-4 py-3 text-sm text-white placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-[#bf1e2e]/60 hover:border-slate-600 transition;
  }
  
  .sk-btn {
    @apply rounded-xl bg-[#bf1e2e] px-5 py-3 text-white font-medium shadow hover:brightness-110 focus:ring-2 focus:ring-[#bf1e2e] disabled:opacity-60 transition;
  }
  
  .sk-label {
    @apply block text-sm text-slate-300 mb-1;
  }
  
  .sk-help {
    @apply text-xs text-slate-400 mt-1;
  }
  
  .sk-error {
    @apply text-xs text-red-400 mt-1;
  }
  
  .sk-input.error {
    @apply ring-2 ring-red-600/70;
  }
</style>

<!-- Contact Form JavaScript -->
<script>
  // Phone number validation and E.164 formatting
  const countryRadios = document.querySelectorAll('input[name="country"]');
  const getCountry = () => {
    const checked = document.querySelector('input[name="country"]:checked');
    return checked ? checked.value : 'AE';
  };
  const phoneInput = document.getElementById('phone-input');
  const phoneError = document.getElementById('phone-error');
  const phonePreview = document.getElementById('phone-preview');
  const form = document.getElementById('contact-form');
  const submitBtn = document.getElementById('submit-btn');
  const submitText = document.getElementById('submit-text');
  const submitLoading = document.getElementById('submit-loading');
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');
  const loadTimeInput = document.getElementById('load-time');

  // Track form load time
  const loadTime = Date.now();
  
  // Phone validation patterns
  const phonePatterns = {
    EG: {
      pattern: /^(01)[0-9]{9}$/,
      code: '+20',
      format: 'Egypt: 01XXXXXXXXX (11 digits)'
    },
    AE: {
      pattern: /^(0?5)[0-9]{8}$/,
      code: '+971',
      format: 'UAE: 5XXXXXXXX or 05XXXXXXXX (9-10 digits)'
    }
  };

  function validatePhone(country, phone) {
    const pattern = phonePatterns[country];
    if (!pattern) return { valid: false, error: 'Invalid country' };

    // Clean phone number
    const cleanPhone = phone.replace(/\D/g, '');
    
    if (!pattern.pattern.test(cleanPhone)) {
      return { 
        valid: false, 
        error: `Invalid format. Expected: ${pattern.format}` 
      };
    }

    // Format to E.164
    let formatted = cleanPhone;
    if (country === 'EG') {
      // Remove leading 0 and add +20
      formatted = pattern.code + cleanPhone.substring(1);
    } else if (country === 'AE') {
      // Remove leading 0 if present and add +971
      if (cleanPhone.startsWith('0')) {
        formatted = pattern.code + cleanPhone.substring(1);
      } else {
        formatted = pattern.code + cleanPhone;
      }
    }

    return { valid: true, formatted };
  }

  function updatePhonePreview() {
    const country = getCountry();
    const phone = phoneInput?.value;
    
    if (!phone) {
      if (phonePreview) phonePreview.textContent = '';
      if (phoneError) phoneError.classList.add('hidden');
      return;
    }

    const validation = validatePhone(country, phone);
    
    if (validation.valid) {
      if (phonePreview) phonePreview.textContent = `Will be saved as: ${validation.formatted}`;
      if (phoneError) phoneError.classList.add('hidden');
      if (phoneInput) {
        phoneInput.classList.remove('border-red-500');
        phoneInput.classList.add('border-slate-700');
      }
    } else {
      if (phonePreview) phonePreview.textContent = '';
      if (phoneError) {
        phoneError.textContent = validation.error || 'Invalid phone number';
        phoneError.classList.remove('hidden');
      }
      if (phoneInput) {
        phoneInput.classList.add('border-red-500');
        phoneInput.classList.remove('border-slate-700');
      }
    }
  }

  // Event listeners
  if (phoneInput) {
    phoneInput.addEventListener('input', updatePhonePreview);
  }
  if (countryRadios?.length) {
    countryRadios.forEach(r => r.addEventListener('change', updatePhonePreview));
  }

  // Validation functions
  function validateServices() {
    const serviceCheckboxes = document.querySelectorAll('input[name="services"]:checked');
    const servicesError = document.getElementById('services-error');
    
    if (serviceCheckboxes.length === 0) {
      if (servicesError) {
        servicesError.textContent = 'Please select at least one service';
        servicesError.classList.remove('hidden');
      }
      return false;
    }
    
    if (servicesError) servicesError.classList.add('hidden');
    return true;
  }

  function validateCarFields() {
    const carMake = document.getElementById('car-make');
    const carYear = document.getElementById('car-year');
    const carMakeError = document.getElementById('car-make-error');
    const carYearError = document.getElementById('car-year-error');
    let isValid = true;

    // Reset errors
    if (carMakeError) carMakeError.classList.add('hidden');
    if (carYearError) carYearError.classList.add('hidden');
    if (carMake) carMake.classList.remove('border-red-500');
    if (carYear) carYear.classList.remove('border-red-500');

    // Validate car make (if provided, should be at least 2 characters)
    if (carMake?.value.trim() && carMake.value.trim().length < 2) {
      if (carMakeError) {
        carMakeError.textContent = 'Car make must be at least 2 characters';
        carMakeError.classList.remove('hidden');
      }
      if (carMake) carMake.classList.add('border-red-500');
      isValid = false;
    }

    // Validate car year (if provided, should be between 1900 and 2025)
    if (carYear?.value) {
      const year = parseInt(carYear.value);
      if (year < 1900 || year > 2025) {
        if (carYearError) {
          carYearError.textContent = 'Please enter a valid year between 1900 and 2025';
          carYearError.classList.remove('hidden');
        }
        if (carYear) carYear.classList.add('border-red-500');
        isValid = false;
      }
    }

    return isValid;
  }

  // Form submission
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Calculate load time
      const submitTime = Date.now();
      const timeDiff = submitTime - loadTime;
      if (loadTimeInput) loadTimeInput.value = timeDiff.toString();

      // Validate services (required)
      if (!validateServices()) {
        const servicesError = document.getElementById('services-error');
        if (servicesError) servicesError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        return;
      }

      // Validate phone
      const country = getCountry();
      const phone = phoneInput?.value;
      const phoneValidation = validatePhone(country, phone);
      
      if (!phoneValidation.valid) {
        updatePhonePreview();
        if (phoneInput) phoneInput.focus();
        return;
      }

      // Validate car fields (optional but if provided must be valid)
      if (!validateCarFields()) {
        return;
      }

      // Show loading state
      if (submitBtn) submitBtn.disabled = true;
      if (submitText) submitText.classList.add('hidden');
      if (submitLoading) submitLoading.classList.remove('hidden');
      if (successMessage) successMessage.classList.add('hidden');
      if (errorMessage) errorMessage.classList.add('hidden');

      try {
        // Prepare form data
        const formData = new FormData(form as HTMLFormElement);
        formData.set('phone', phoneValidation.formatted); // Use E.164 format
        
        // Submit to API
        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (response.ok) {
          // Success - trigger tracking events
          if (typeof fbq !== 'undefined') {
            fbq('track', 'Lead', {
              content_name: 'Contact Form',
              content_category: 'Lead Generation'
            });
          }
          
          if (typeof gtag !== 'undefined') {
            gtag('event', 'form_submit', {
              event_category: 'engagement',
              event_label: 'contact_form',
              value: 1
            });
          }

          // Show success message and reset form
          if (successMessage) successMessage.classList.remove('hidden');
          (form as HTMLFormElement).reset();
          if (phonePreview) phonePreview.textContent = '';
          
          // Scroll to success message
          if (successMessage) successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
          throw new Error(result.error || 'Failed to send message');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        if (errorText) errorText.textContent = error.message || 'Please try again';
        if (errorMessage) errorMessage.classList.remove('hidden');
        
        // Scroll to error message
        if (errorMessage) errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
      } finally {
        // Reset button state
        if (submitBtn) submitBtn.disabled = false;
        if (submitText) submitText.classList.remove('hidden');
        if (submitLoading) submitLoading.classList.add('hidden');
      }
    });
  }
</script>
