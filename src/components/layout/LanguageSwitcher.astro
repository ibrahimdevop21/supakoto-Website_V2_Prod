---
import { t, getCurrentLocale } from '../../i18n/index';

const currentLang = getCurrentLocale(Astro);
const currentPath = Astro.url.pathname;

const languages = [
  { code: 'en', name: t('language.en', {}, Astro) || 'English' },
  { code: 'ar', name: t('language.ar', {}, Astro) || 'العربية' },
];

const otherLang = languages.find((lang) => lang.code !== currentLang);
const otherLangLabel = otherLang?.name || (currentLang === 'en' ? 'العربية' : 'English');

// Generate the correct path for the other language
function generateSwitchPath(currentPath: string, targetLang: string): string {
  // Remove current locale prefix if it exists (for Arabic /ar/)
  let pathWithoutLocale = currentPath.replace(/^\/ar(\/|$)/, '/');
  
  // Clean up the path
  pathWithoutLocale = pathWithoutLocale === '/' ? '' : pathWithoutLocale;
  
  // For English (default locale), use root paths without prefix
  if (targetLang === 'en') {
    return pathWithoutLocale === '' ? '/' : pathWithoutLocale;
  }
  
  // For Arabic, add /ar prefix
  if (targetLang === 'ar') {
    return pathWithoutLocale === '' ? '/ar/' : `/ar${pathWithoutLocale}`;
  }
  
  // Fallback
  return '/';
}

const switchPath = generateSwitchPath(currentPath, otherLang?.code || 'en');

// Add title attribute for debugging
const debugTitle = `Switch from ${currentLang} to ${otherLang?.code}: ${currentPath} → ${switchPath}`;
---

<div class="relative inline-block text-left">
  <button
    type="button"
    class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
    id="language-menu-button"
    aria-expanded="true"
    aria-haspopup="true"
  >
    <span class="mr-1 rtl:ml-1 rtl:mr-0">{currentLang === "en" ? "English" : "العربية"}</span>
    <svg class="-mr-1 ml-2 h-5 w-5 rtl:mr-2 rtl:ml-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>

  <div
    class="hidden origin-top-right absolute right-0 rtl:right-auto rtl:left-0 mt-2 w-32 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
    id="language-menu"
  >
    <div class="py-1" role="none">
      <a
        href={switchPath}
        title={debugTitle}
        class="flex items-center gap-1 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 rtl:text-right"
        role="menuitem"
        tabindex="-1"
      >
        {otherLangLabel}
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('language-menu-button');
    const menu = document.getElementById('language-menu');
    
    if (button && menu) {
      button.addEventListener('click', () => {
        menu.classList.toggle('hidden');
      });
      
      // Close the menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
          menu.classList.add('hidden');
        }
      });
    }
  });
</script>
