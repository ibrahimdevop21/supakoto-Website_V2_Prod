---
export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  image?: string;
  type?: 'website' | 'article' | 'product' | 'service';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  locale?: string;
  alternateLocales?: Array<{ locale: string; url: string }>;
  canonicalURL?: string;
  noindex?: boolean;
  nofollow?: boolean;
  schema?: Record<string, any> | Array<Record<string, any>>;
}

const {
  title,
  description,
  keywords,
  image,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  locale = 'en',
  alternateLocales = [],
  canonicalURL,
  noindex = false,
  nofollow = false,
  schema
} = Astro.props;

const siteUrl = Astro.site || 'https://supakoto.com';
const currentPath = Astro.url.pathname;

// Generate proper canonical URL based on locale and path
let canonical: string;
if (canonicalURL) {
  canonical = canonicalURL;
} else {
  // For English pages: https://supakoto.com/{path} (no /en)
  // For Arabic pages: https://supakoto.com/ar/{path}
  if (locale === 'ar') {
    // Ensure Arabic pages have /ar prefix in canonical
    const cleanPath = currentPath.startsWith('/ar') ? currentPath : `/ar${currentPath}`;
    canonical = new URL(cleanPath, siteUrl).toString();
  } else {
    // For English, remove any /en prefix and use root
    const cleanPath = currentPath.startsWith('/en') ? currentPath.replace('/en', '') : currentPath;
    canonical = new URL(cleanPath === '' ? '/' : cleanPath, siteUrl).toString();
  }
}

// Generate hreflang alternate URLs
const hreflangAlternates: Array<{ locale: string; url: string }> = [];

// Add current page
hreflangAlternates.push({ locale: locale, url: canonical });

// Generate alternate language version
if (locale === 'en') {
  // For English page, add Arabic equivalent
  const arabicPath = currentPath === '/' ? '/ar' : `/ar${currentPath}`;
  hreflangAlternates.push({ 
    locale: 'ar', 
    url: new URL(arabicPath, siteUrl).toString() 
  });
} else if (locale === 'ar') {
  // For Arabic page, add English equivalent
  const englishPath = currentPath.replace('/ar', '') || '/';
  hreflangAlternates.push({ 
    locale: 'en', 
    url: new URL(englishPath, siteUrl).toString() 
  });
}

// Merge with any additional alternates provided
const allAlternates = [...hreflangAlternates, ...alternateLocales];

const ogImage = image || new URL('/assets/og-image.png', siteUrl).toString();
const siteName = 'SupaKoto';

// Generate robots meta content
const robotsContent = [
  noindex ? 'noindex' : 'index',
  nofollow ? 'nofollow' : 'follow',
  'max-snippet:-1',
  'max-image-preview:large',
  'max-video-preview:-1'
].join(', ');
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
{description && <meta name="description" content={description} />}
{keywords && <meta name="keywords" content={keywords} />}
{author && <meta name="author" content={author} />}
<meta name="robots" content={robotsContent} />

<!-- Canonical URL -->
<link rel="canonical" href={canonical} />

<!-- Language and Locale -->
<meta property="og:locale" content={locale} />
{allAlternates.map(({ locale: altLocale, url }) => (
  <link rel="alternate" hreflang={altLocale} href={url} />
))}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonical} />
<meta property="og:title" content={title} />
{description && <meta property="og:description" content={description} />}
<meta property="og:image" content={ogImage} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:type" content="image/png" />
<meta property="og:site_name" content={siteName} />
{publishedTime && <meta property="article:published_time" content={publishedTime} />}
{modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
{author && <meta property="article:author" content={author} />}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={canonical} />
<meta name="twitter:title" content={title} />
{description && <meta name="twitter:description" content={description} />}
<meta name="twitter:image" content={ogImage} />
<meta name="twitter:image:alt" content={`${title} - ${siteName}`} />

<!-- Additional SEO Meta Tags -->
<meta name="format-detection" content="telephone=yes" />
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

<!-- Preconnect to external domains -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

{schema && (
  <script type="application/ld+json" set:html={JSON.stringify(Array.isArray(schema) ? schema : [schema])} />
)}
